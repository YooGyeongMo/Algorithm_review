# 병든 나이트는 N*M 가장 왼쪽 아래 칸
# N-1,0이 시작
# 1. 2칸 위로 1칸 오른쪽 ( 시작 행-2, 시작 열 + 1)
# 2. 1칸 위로 2칸 오른쪽 ( 시작 행-1, 시작 열 + 2)
# 3. 1칸 아래로 2칸 오른쪽 ( 시작 행 +1, 시작 열 +2)
# 4. 2칸 아래로 1칸 오른쪽 ( 시작 행 +2, 시작 열 + 1)


# N = 1 일때는 위아래로 못가기에 무조건 1
# N = 2 일때는 2,3번 방법 무한대로 가능하나 M이 커지는거에 따라 값이 달라지는데 이동횟수가 4번보다 많아지면 다른 방법 사용하여야 하지만, N=2사용할 수가 없음
# 그래서 M > 8면 무조건 그냥 최대 방문수는 4다.
# 그 밑은 (M+1/2) 한 값
# N = 3 일 때는 1,4 쓰는게 이득 1칸씩가니까

N, M = map(int, input().split())

if N == 1:
    print(1)
elif N == 2:
    print(min(4,int((M+1)/2)))
elif N >= 3 and M < 7:
    print(min(4,M))
else:
    print(5+M-7)



# 병든 나이트는 여행을 시작하려고 하고, 여행을 하면서 방문한 칸의 수를 최대로 하려고 한다.
# 병든 나이트의 이동 횟수가 4번보다 적지 않다면, 이동 방법을 모두 한 번씩 사용해야 한다.
# 적어도 N이 4개 이상 이어야하고, M은 7 개 이상이어야 위 조건 성립
# 이동 횟수가 4번보다 적은 경우(방문한 칸이 5개 미만)에는 이동 방법에 대한 제약이 없다.